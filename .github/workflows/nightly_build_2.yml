name: Nightly Deployment Workflow

on:
  schedule:
    - cron: "0 0 * * *"  
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  nightly-deployment:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-west-2
      IMAGE_TAG: latest
      ECR_REPOSITORY_FRONTEND: bookshop-frontend
      ECR_REPOSITORY_BACKEND: bookshop-backend
      SOURCE_REPO: https://github.com/SkyeKD/bookshop_2.git  
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      ECR_BACKEND: "bookshop-backend"
      ECR_FRONTEND: "bookshop-frontend"
      ECR_REGISTRY: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"

    steps:
   
      - name: Checkout Infra Repo
        uses: actions/checkout@v4
        with:
          path: infra  

      - name: Checkout Source Repo
        uses: actions/checkout@v4
        with:
          repository: "SkyeKD/bookshop_2"
          path: app
      
      - name: Debug Workflow Directory
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing files:"
          ls -R
    
      - name: Build and Start Containers Using Docker Compose
        run: |
          cd app
          docker compose up -d
          sleep 20

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}


      - name: Push image to ECR
        run: |
          FRONTEND_IMAGE_ID=$(docker images --filter=reference="frontend" --format "{{.ID}}")
          BACKEND_IMAGE_ID=$(docker images --filter=reference="backend" --format "{{.ID}}")

          echo "frontend Docker Image ID : $FRONTEND_IMAGE_ID"
          echo "backend Docker Image ID : $BACKEND_IMAGE_ID"
          
          echo "üîì Logging in to AWS ECR..."
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY || {
            echo "‚ùå AWS ECR login failed!"
            exit 1
          }

          TIMESTAMP=$(date "+%Y%m%d.%H%M%S")
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          FRONTEND_REPO="$ECR_REGISTRY/${{ env.ECR_REPOSITORY_FRONTEND }}"
          BACKEND_REPO="$ECR_REGISTRY/${{ env.ECR_REPOSITORY_BACKEND }}"

          docker tag $FRONTEND_IMAGE_ID $FRONTEND_REPO:$TIMESTAMP
          docker tag $FRONTEND_IMAGE_ID $FRONTEND_REPO:$IMAGE_TAG
          docker push --all-tags $FRONTEND_REPO

          docker tag $BACKEND_IMAGE_ID $BACKEND_REPO:$TIMESTAMP
          docker tag $BACKEND_IMAGE_ID $BACKEND_REPO:$IMAGE_TAG
          docker push --all-tags $BACKEND_REPO

      
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          printf "%s" "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/bookshop-key.pem
          chmod 400 ~/.ssh/bookshop-key.pem

      - name: Deploy EC2 Instance
        run: |
          set -e
          chmod +x infra/scripts/deploy-ec2.sh
          ./infra/scripts/deploy-ec2.sh
          sleep 10

      - name: Get EC2 Public IP
        run: |
          if [ -f ec2_ip.txt ]; then
            echo "EC2_PUBLIC_IP=$(cat ec2_ip.txt)" >> $GITHUB_ENV
          else
            echo "‚ùå Error: No EC2 IP found!"
            exit 1
          fi

      - name: Debug EC2 Public IP
        run: cat ec2_ip.txt || echo "No EC2 IP found!"
        
      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/bookshop-key.pem ubuntu@${{ env.EC2_PUBLIC_IP }} "echo 'SSH Connection Successful'"
 
      - name: Wait for EC2 to be ready
        run: |
          if [ -z "${{ env.EC2_PUBLIC_IP }}" ]; then
            echo "‚ùå EC2_PUBLIC_IP is empty. Cannot proceed."
            exit 1
          fi
          
          echo "Waiting for EC2 SSH access..."
          chmod 400 ~/.ssh/bookshop-key.pem
          until ssh -o StrictHostKeyChecking=no -i ~/.ssh/bookshop-key.pem ubuntu@${{ env.EC2_PUBLIC_IP }} "echo 'EC2 is ready'"
          do
            sleep 10
          done

      - name: SSH into EC2 and install Docker & Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_PUBLIC_IP }} 
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            set -e
            sudo apt update -y
            sudo apt upgrade -y

            echo "üì¶ Installing Docker..."
            sudo apt update && sudo apt install -y docker.io docker-compose git
            sudo systemctl start docker
            sudo usermod -aG docker $USER
            newgrp docker
            sleep 10

            echo "‚úÖ Docker Version: $(docker --version || echo '‚ùå Docker installation failed!')"
            echo "‚úÖ Docker Compose Version: $(docker-compose --version || echo '‚ùå Docker Compose installation failed!')"

            echo "üöÄ Setup Complete!"
      

      - name: Pull ECR Image & Deploy Test Using Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/bookshop-key.pem ubuntu@${{ env.EC2_PUBLIC_IP }} << EOF
            set -e
            
            echo "üîç Checking AWS CLI installation..."
            if ! command -v aws &> /dev/null; then
              echo "üöÄ Installing AWS CLI..."

              if ! command -v unzip &> /dev/null; then
                echo "üì¶ Installing unzip..."
                sudo apt update -y
                sudo apt install -y unzip
              fi

              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"

              unzip awscliv2.zip
              
              sudo ./aws/install

              rm -rf awscliv2.zip aws
              
            else
              echo "‚úÖ AWS CLI already installed."
            fi
            
            echo "AWS CLI Version:"
            aws --version || echo "‚ùå AWS CLI installation failed!"
            
            echo "üîë Configuring AWS Credentials..."
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            
            echo "üîç Checking AWS Region and Registry..."
            echo "ECR_BACKEND: $ECR_BACKEND"
            echo "ECR_REGISTRY: $ECR_REGISTRY"

            echo "üîì Logging in to AWS ECR..."
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_REGISTRY || {
              echo "‚ùå AWS ECR login failed!"
              exit 1
            }

            echo "Cloning Source Code Repo..."
            if [ ! -d "app" ]; then
              git clone https://github.com/SkyeKD/bookshop_2.git app
            else
              cd app && git pull && cd ..
            fi

            cd app || exit 1 


            echo "Updating docker-compose-test.yml..."
            export ECR_BACKEND_IMAGE="$ECR_REGISTRY/$ECR_BACKEND:latest"
            export ECR_FRONTEND_IMAGE="$ECR_REGISTRY/$ECR_FRONTEND:latest"
          
            envsubst < docker-compose-test.yml > docker-compose-test.yml.tmp && mv docker-compose-test.yml.tmp docker-compose-test.yml

            echo "Running Docker Compose..."
            sudo docker-compose -f docker-compose-test.yml down 
            sudo docker-compose -f docker-compose-test.yml up -d 
 
          EOF
          
      - name: Run Smoke Test on EC2
        run: |
          chmod 400 ~/.ssh/bookshop-key.pem
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/bookshop-key.pem ubuntu@${{ env.EC2_PUBLIC_IP }} << 'EOF'
            
            sleep 10

            echo "üîç Checking if frontend is running..."
            curl -Isf http://localhost:3000 || (echo "‚ùå frontend not responding!" && exit 1)
            
            # echo "üîç Checking if backend is running..."
            curl -sSf http://localhost:8800/books || (echo "‚ùå Backend not responding!" && exit 1)
            echo "‚úÖ Smoke Test Passed!"
          EOF


      - name: Delete Images in ECR if Test Fails
        if: failure()
        run: |
          echo "‚ùå Smoke Test Failed! Removing ECR images..."

          PRE_FRONTEND_IMAGE_TAG=$(aws ecr list-images --repository-name bookshop-frontend  \
            --query 'imageIds[?imageTag!=`latest`].[imageTag]' --output text | sort -r | sed -n '2p')
          PRE_BACKEND_IMAGE_TAG=$(aws ecr list-images --repository-name bookshop-backend \
            --query 'imageIds[?imageTag!=`latest`].[imageTag]' --output text | sort -r | sed -n '2p')
          
          echo "üîç Debugging ECR Cleanup..."
          echo "üìå Current TIMESTAMP: $TIMESTAMP"
          echo "üìå Previous frontend tag (should become latest): $PRE_FRONTEND_IMAGE_TAG"
          echo "üìå Previous backend tag (should become latest): $PRE_BACKEND_IMAGE_TAG"

          aws ecr batch-delete-image --repository-name bookshop-frontend --image-ids imageTag=${{ env.TIMESTAMP }}
          aws ecr batch-delete-image --repository-name bookshop-frontend --image-ids imageTag=${{ env.IMAGE_TAG }}
          aws ecr batch-delete-image --repository-name bookshop-backend --image-ids imageTag=${{ env.TIMESTAMP }}
          aws ecr batch-delete-image --repository-name bookshop-backend --image-ids imageTag=${{ env.IMAGE_TAG }}
 
          if [ -n "$PRE_FRONTEND_IMAGE_TAG" ]; then
            echo "üîÑ Tagging frontend image $PRE_FRONTEND_IMAGE_TAG as latest..."
            
            FRONTEND_MANIFEST=$(aws ecr batch-get-image --repository-name bookshop-frontend --image-ids imageTag="$PRE_FRONTEND_IMAGE_TAG" --output text --query 'images[].imageManifest')

            if [ -n "$FRONTEND_MANIFEST" ]; then
              aws ecr put-image --repository-name bookshop-frontend --image-tag latest --image-manifest "$FRONTEND_MANIFEST"
              echo "‚úÖ Successfully tagged frontend $PRE_FRONTEND_IMAGE_TAG as latest."
            else
              echo "‚ùå Failed to retrieve image manifest for frontend."
            fi

          else
            echo "‚ùå No previous frontend image found. Skipping."
          fi


          if [ -n "$PRE_BACKEND_IMAGE_TAG" ]; then
            echo "üîÑ Tagging backend image $PRE_BACKEND_IMAGE_TAG as latest..."

            BACKEND_MANIFEST=$(aws ecr batch-get-image --repository-name bookshop-backend --image-ids imageTag="$PRE_BACKEND_IMAGE_TAG" --output text --query 'images[].imageManifest')

            if [ -n "$BACKEND_MANIFEST" ]; then
              aws ecr put-image --repository-name bookshop-backend --image-tag ${{ env.IMAGE_TAG }} --image-manifest "$BACKEND_MANIFEST"
              echo "‚úÖ Successfully tagged backend $PRE_BACKEND_IMAGE_TAG as latest."
            else
              echo "‚ùå Failed to retrieve image manifest for backend."
            fi

          else
            echo "‚ùå No previous backend image found. Skipping."
          fi

      
      - name: Deploy to QA EC2
        if: success()
        run: |
          echo "Smoke test succeeded. Deploying latest images to QA..."
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/bookshop-key.pem ubuntu@${{ secrets.QA_EC2_IP }} << EOF
            set -e 
            
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            export AWS_DEFAULT_REGION=${{ secrets.AWS_REGION }}
            export ECR_REGISTRY=${{ env.ECR_REGISTRY }}
          
            export ECR_BACKEND_IMAGE="$ECR_REGISTRY/bookshop-backend:latest"
            export ECR_FRONTEND_IMAGE="$ECR_REGISTRY/bookshop-frontend:latest"
          
            export DB_HOST="${{ secrets.RDS_ENDPOINT }}"
            export DB_USER="${{ secrets.RDS_USERNAME }}"
            export DB_PASSWORD="${{ secrets.RDS_PASSWORD }}"
            export DB_NAME="${{ secrets.RDS_DBNAME }}"

            echo "üîç Checking AWS Region and Registry..."
            echo "ECR_BACKEND_IMAGE: $ECR_BACKEND_IMAGE"
            echo "ECR_REGISTRY: $ECR_REGISTRY"
          
            echo "üîì Logging in to AWS ECR..."
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_REGISTRY || {
              echo "‚ùå AWS ECR login failed!"
              exit 1
            }

            echo "Cloning Source Code Repo..."
            if [ ! -d "app" ]; then
              git clone https://github.com/SkyeKD/bookshop_2.git app
            else
              cd app && git pull && cd ..
            fi

            cd app || exit 1 


            echo "Updating docker-compose-qa.yml..."
            envsubst < docker-compose-qa.yml > docker-compose-qa.yml.tmp && mv docker-compose-qa.yml.tmp docker-compose-qa.yml

            echo "üöÄ Pulling and Deploying Docker Containers..."
            sudo docker-compose -f docker-compose-qa.yml pull
            sudo docker-compose -f docker-compose-qa.yml down
            sudo docker-compose -f docker-compose-qa.yml up -d
            sudo docker image prune -f

            echo "‚úÖ Deployment completed successfully!"
          EOF
 

      - name: Terminate EC2 Instance
        if: always()
        run: |
          if [ -f ec2-instance-id.env ]; then
            INSTANCE_ID=$(cat ec2-instance-id.env)
            if [ -n "$INSTANCE_ID" ]; then
              echo "Terminating EC2 Instance: $INSTANCE_ID"
              aws ec2 terminate-instances --instance-ids "$INSTANCE_ID"
              echo "‚úÖ EC2 Instance $INSTANCE_ID Terminated!"
            else
              echo "‚ùå ERROR: INSTANCE_ID is empty! Skipping termination."
              exit 1
            fi
          else
            echo "‚ùå No EC2 Instance ID file found, skipping termination!"
            exit 1
          fi
