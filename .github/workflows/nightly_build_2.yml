name: Nightly Deployment Workflow

on:
  schedule:
    - cron: "0 0 * * *"  
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  nightly-deployment:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-west-2
      IMAGE_TAG: latest
      ECR_REPOSITORY_FRONTEND: bookshop-frontend
      ECR_REPOSITORY_BACKEND: bookshop-backend
      SOURCE_REPO: https://github.com/SkyeKD/bookshop_2.git  
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      ECR_BACKEND: "bookshop-backend"
      ECR_FRONTEND: "bookshop-frontend"
      ECR_REGISTRY: "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"

    steps:
   
      - name: Checkout Infra Repo
        uses: actions/checkout@v4
        with:
          path: infra  # Êää infra repo ÊãâÂèñÂà∞ infra ÁõÆÂΩï

      - name: Checkout Source Repo
        uses: actions/checkout@v4
        with:
          repository: "SkyeKD/bookshop_2"
          path: app
      
      - name: Debug Workflow Directory
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing files:"
          ls -R
    
      - name: Build and Start Containers Using Docker Compose
        run: |
          cd app
          docker compose up -d
          sleep 20

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      # - name: Checkout Source Repo
      #   uses: actions/checkout@v4
      #   with:
      #     repository: "SkyeKD/bookshop_2"
      #     path: "app"  # Directory where the repo will be cloned

      # - name: Build and Start Containers Using Docker Compose
      #   run: |
      #     cd app
      #     docker compose up -d
      #     sleep 20


      - name: Push image to ECR
        run: |
          FRONTEND_IMAGE_ID=$(docker images --filter=reference="frontend" --format "{{.ID}}")
          BACKEND_IMAGE_ID=$(docker images --filter=reference="backend" --format "{{.ID}}")

          echo "Found Docker Image ID (frontend): $FRONTEND_IMAGE_ID"
          echo "Found Docker Image ID (backend): $BACKEND_IMAGE_ID"

          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

          TIMESTAMP=$(date "+%Y%m%d.%H%M%S")
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          docker tag $FRONTEND_IMAGE_ID ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/${{ env.ECR_REPOSITORY_FRONTEND }}:$TIMESTAMP
          docker tag $FRONTEND_IMAGE_ID ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/${{ env.ECR_REPOSITORY_FRONTEND }}:$IMAGE_TAG
          docker push --all-tags ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/${{ env.ECR_REPOSITORY_FRONTEND }}

          docker tag $BACKEND_IMAGE_ID ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/${{ env.ECR_REPOSITORY_BACKEND }}:$TIMESTAMP
          docker tag $BACKEND_IMAGE_ID ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/${{ env.ECR_REPOSITORY_BACKEND }}:$IMAGE_TAG
          docker push --all-tags ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/${{ env.ECR_REPOSITORY_BACKEND }}

      # - name: Launch Temporary EC2 for Smoke Test
      #   id: launch_ec2
      #   run: |
      #     INSTANCE_ID=$(aws ec2 run-instances \
      #       --image-id ami-053a45fff0a704a47 \
      #       --count 1 \
      #       --instance-type t2.micro \
      #       --key-name ec2TestInstanceKey \
      #       --security-group-ids sg-06ed8968a7a3ec08f \
      #       --subnet-id subnet-058dd85267834457a \
      #       --query 'Instances[0].InstanceId' \
      #       --output text)
      #     echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
      #     aws ec2 wait instance-running --instance-ids $INSTANCE_ID
      #     sleep 10
      
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          printf "%s" "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/bookshop-key.pem
          chmod 400 ~/.ssh/bookshop-key.pem

      - name: Deploy EC2 Instance
        run: |
          set -e
          chmod +x infra/scripts/deploy-ec2.sh
          ./infra/scripts/deploy-ec2.sh
          sleep 10

      - name: Get EC2 Public IP
        run: |
          if [ -f ec2_ip.txt ]; then
            echo "EC2_PUBLIC_IP=$(cat ec2_ip.txt)" >> $GITHUB_ENV
          else
            echo "‚ùå Error: No EC2 IP found!"
            exit 1
          fi

      - name: Debug EC2 Public IP
        run: cat ec2_ip.txt || echo "No EC2 IP found!"
        
      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/bookshop-key.pem ubuntu@${{ env.EC2_PUBLIC_IP }} "echo 'SSH Connection Successful'"
 
      - name: Wait for EC2 to be ready

        run: |
          if [ -z "${{ env.EC2_PUBLIC_IP }}" ]; then
            echo "‚ùå EC2_PUBLIC_IP is empty. Cannot proceed."
            exit 1
          fi
          
          echo "Waiting for EC2 SSH access..."
          chmod 400 ~/.ssh/bookshop-key.pem
          until ssh -o StrictHostKeyChecking=no -i ~/.ssh/bookshop-key.pem ubuntu@${{ env.EC2_PUBLIC_IP }} "echo 'EC2 is ready'"
          do
            sleep 10
          done

      - name: SSH into EC2 and install Docker & Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_PUBLIC_IP }} 
          username: ubuntu
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            set -e
            sudo apt update -y
            sudo apt upgrade -y

            echo "üì¶ Installing Docker..."
            sudo apt update && sudo apt install -y docker.io docker-compose git
            sudo systemctl start docker
            sudo usermod -aG docker $USER
            newgrp docker
            sleep 10

            echo "‚úÖ Docker Version: $(docker --version || echo '‚ùå Docker installation failed!')"
            echo "‚úÖ Docker Compose Version: $(docker-compose --version || echo '‚ùå Docker Compose installation failed!')"

            echo "üöÄ Setup Complete!"
      

      - name: Pull ECR Image & Deploy Using Docker Compose
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/bookshop-key.pem ubuntu@${{ env.EC2_PUBLIC_IP }} << EOF
            set -e
            
            echo "üîç Checking AWS CLI installation..."
            if ! command -v aws &> /dev/null; then
              echo "üöÄ Installing AWS CLI..."
              
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              
              sudo ./aws/install
              
              rm -rf awscliv2.zip aws
              
            else
              echo "‚úÖ AWS CLI already installed."
            fi
    
            echo "Logging in to AWS ECR..."
            aws ecr get-login-password --region $AWS_REGION | sudo docker login --username AWS --password-stdin $ECR_REGISTRY

            echo "Cloning Source Code Repo..."
            if [ ! -d "app" ]; then
              git clone https://github.com/SkyeKD/bookshop_2.git app
            else
              cd app && git pull && cd ..
            fi

            cd app || exit 1 

            if [ ! -f docker-compose.yml ]; then
              echo "‚ùå docker-compose.yml not found! Exiting..."
              exit 1
            fi

            echo "Pulling latest Docker images from ECR..."
            sudo docker pull $ECR_REGISTRY/$ECR_FRONTEND:latest
            sudo docker pull $ECR_REGISTRY/$ECR_BACKEND:latest

            echo "Updating docker-compose.yml..."
            sed -i "s|image: backend|image: $ECR_REGISTRY/$ECR_BACKEND:latest|" docker-compose.yml
            sed -i "s|image: frontend|image: $ECR_REGISTRY/$ECR_FRONTEND:latest|" docker-compose.yml

            echo "Running Docker Compose..."
            sudo docker-compose down  
            sudo docker-compose up -d  
          EOF
          
      - name: Run Smoke Test on EC2
        run: |
          chmod 400 ~/.ssh/bookshop-key.pem
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/bookshop-key.pem ubuntu@${{ env.EC2_PUBLIC_IP }} << 'EOF'
            
            sleep 10

            echo "üîç Checking if frontend is running..."
            curl -Isf http://localhost:3000 || (echo "‚ùå frontend not responding!" && exit 1)
            
            # echo "üîç Checking if backend is running..."
            curl -sSf http://localhost:8800/books || (echo "‚ùå Backend not responding!" && exit 1)
            echo "‚úÖ Smoke Test Passed!"
          EOF
      
      - name: Delete Images in ECR if Test Fails
        run: |
          echo "Smoke test failed. Cleaning up Docker images in ECR..."
          
          PRE_FRONTEND_IMAGE_TAG=$(aws ecr list-images --repository-name book-app/frontend \
            --query 'imageIds[?imageTag!=`latest`].[imageTag]' --output text | sort -r | sed -n '2p')
          PRE_BACKEND_IMAGE_TAG=$(aws ecr list-images --repository-name book-app/backend \
            --query 'imageIds[?imageTag!=`latest`].[imageTag]' --output text | sort -r | sed -n '2p')
          
          aws ecr batch-delete-image --repository-name book-app/frontend --image-ids imageTag=${{ env.TIMESTAMP }}
          aws ecr batch-delete-image --repository-name book-app/frontend --image-ids imageTag=${{ env.IMAGE_TAG }}
          aws ecr batch-delete-image --repository-name book-app/backend --image-ids imageTag=${{ env.TIMESTAMP }}
          aws ecr batch-delete-image --repository-name book-app/backend --image-ids imageTag=${{ env.IMAGE_TAG }}

          if [ -z "$PRE_FRONTEND_IMAGE_TAG" ]; then
            echo "‚ùå No previous images found. Cannot restore 'latest'."
            exit 1
          fi
          
          if [ -z "$PRE_BACKEND_IMAGE_TAG" ]; then
            echo "‚ùå No previous images found. Cannot restore 'latest'."
            exit 1
          fi

          echo "üîÑ Previous valid frontend image found: $PRE_FRONTEND_IMAGE_TAG"
          echo "üîÑ Previous valid backend image found: $PRE_BACKEND_IMAGE_TAG"
          
          # Save the image manifest to a file for security
          FRONTEND_MANIFEST=$(aws ecr batch-get-image --repository-name book-app/frontend --image-ids imageTag="$PRE_FRONTEND_IMAGE_TAG" --output text --query 'images[].imageManifest')
          BACKEND_MANIFEST=$(aws ecr batch-get-image --repository-name book-app/backend --image-ids imageTag="$PRE_BACKEND_IMAGE_TAG" --output text --query 'images[].imageManifest')

          # Retag
          aws ecr put-image --repository-name book-app/frontend --image-tag ${{ env.IMAGE_TAG }} --image-manifest "$FRONTEND_MANIFEST"
          aws ecr put-image --repository-name book-app/backend --image-tag ${{ env.IMAGE_TAG }} --image-manifest "$BACKEND_MANIFEST"
       


      # - name: Deploy to QA EC2
      #   if: success()
      #   run: |
      #     echo "Smoke test succeeded. Deploying latest images to QA..."
      #     ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.QA_EC2_PUBLIC_DNS }} << EOF
      #       export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
      #       export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #       export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
      #       export AWS_REGION=${{ env.AWS_REGION }}

      #       export DB_HOST="${{ secrets.RDS_ENDPOINT }}"
      #       export DB_USER="${{ secrets.RDS_USERNAME }}"
      #       export DB_PASSWORD="${{ secrets.RDS_PASSWORD }}"
      #       export DB_NAME="${{ secrets.RDS_DBNAME }}"

      #       aws ecr get-login-password --region \$AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.\$AWS_REGION.amazonaws.com
      #       docker-compose -f docker-compose-qa.yml pull
      #       docker-compose down
      #       docker-compose -f docker-compose-qa.yml up -d
      #       docker image prune -f
      #     EOF
      # - name: Delete Images in ECR if Test Fails
      #   if: failure()
      #   run: |
      #     echo "Smoke test failed. Cleaning up Docker images in ECR..."
          
      #     PRE_FRONTEND_IMAGE_TAG=$(aws ecr list-images --repository-name book-app/frontend \
      #       --query 'imageIds[?imageTag!=`latest`].[imageTag]' --output text | sort -r | sed -n '2p')
      #     PRE_BACKEND_IMAGE_TAG=$(aws ecr list-images --repository-name book-app/backend \
      #       --query 'imageIds[?imageTag!=`latest`].[imageTag]' --output text | sort -r | sed -n '2p')
          
      #     aws ecr batch-delete-image --repository-name book-app/frontend --image-ids imageTag=${{ env.TIMESTAMP }}
      #     aws ecr batch-delete-image --repository-name book-app/frontend --image-ids imageTag=${{ env.IMAGE_TAG }}
      #     aws ecr batch-delete-image --repository-name book-app/backend --image-ids imageTag=${{ env.TIMESTAMP }}
      #     aws ecr batch-delete-image --repository-name book-app/backend --image-ids imageTag=${{ env.IMAGE_TAG }}

      #     if [ -z "$PRE_FRONTEND_IMAGE_TAG" ]; then
      #       echo "‚ùå No previous images found. Cannot restore 'latest'."
      #       exit 1
      #     fi
          
      #     if [ -z "$PRE_BACKEND_IMAGE_TAG" ]; then
      #       echo "‚ùå No previous images found. Cannot restore 'latest'."
      #       exit 1
      #     fi

      #     echo "üîÑ Previous valid frontend image found: $PRE_FRONTEND_IMAGE_TAG"
      #     echo "üîÑ Previous valid backend image found: $PRE_BACKEND_IMAGE_TAG"
          
      #     # Save the image manifest to a file for security
      #     FRONTEND_MANIFEST=$(aws ecr batch-get-image --repository-name book-app/frontend --image-ids imageTag="$PRE_FRONTEND_IMAGE_TAG" --output text --query 'images[].imageManifest')
      #     BACKEND_MANIFEST=$(aws ecr batch-get-image --repository-name book-app/backend --image-ids imageTag="$PRE_BACKEND_IMAGE_TAG" --output text --query 'images[].imageManifest')

      #     # Retag
      #     aws ecr put-image --repository-name book-app/frontend --image-tag ${{ env.IMAGE_TAG }} --image-manifest "$FRONTEND_MANIFEST"
      #     aws ecr put-image --repository-name book-app/backend --image-tag ${{ env.IMAGE_TAG }} --image-manifest "$BACKEND_MANIFEST"
          

      # - name: Terminate Temporary EC2 Instance
      #   run: |
      #     aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}